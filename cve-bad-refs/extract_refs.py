import csv
import sys
import os
import re
import subprocess

# Check if the user provided a CSV file as an argument
if len(sys.argv) != 2:
    print(f"Usage: python {os.path.basename(__file__)} <input_csv_file>")
    sys.exit(1)

input_csv = sys.argv[1]
output_refs_txt = "cverefs.txt"
output_domains_txt = "cvedomains.txt"

# Regular expression to match URLs with http://, https://, or ftp:// handlers
url_pattern = re.compile(r'(http://|https://|ftp://)[^\s]+')

# Regular expression to match URLs with http://, https://, or ftp:// handlers
url_pattern = re.compile(r'(https?|ftp)://([^\s]+)')

try:
    with open(input_csv, newline='') as csvfile, open(output_refs_txt, 'w') as outfile:
        reader = csv.reader(csvfile)
        for row in reader:
            if len(row) >= 4:
                # Split the fourth column by '|', strip whitespace, and find URLs
                elements = row[3].split('|')
                for element in elements:
                    element = element.strip()
                    # Find URLs and write them to the output file
                    urls = url_pattern.findall(element)
                    for match in urls:
                        url = match[0] + "://" + match[1]
                        outfile.write(url + '\n')
    print(f"URLs extracted and saved to '{output_refs_txt}'.")
except FileNotFoundError:
    print(f"Error: Input CSV file '{input_csv}' not found.")
    sys.exit(1)
except Exception as e:
    print(f"An error occurred: {str(e)}")
    sys.exit(1)

# Now, read the references file and extract domain parts
try:
    with open(output_refs_txt, 'r') as csvrefs, open(output_domains_txt, 'w') as outdomains:
        for line in csvrefs:
            # Remove leading http://, https://, or ftp:// handlers
            url = re.sub(r'^(http://|https://|ftp://)', '', line.strip())
            
            # Split the URL by '/' to isolate the domain
            parts = url.split('/')
            
            # Write the domain part to the output domains file
            if len(parts) > 0:
                outdomains.write(parts[0] + '\n')

    print(f"Domains extracted and saved to '{output_domains_txt}'.")
except Exception as e:
    print(f"An error occurred: {str(e)}")
    sys.exit(1)
    
try:    
    # Run the 'sort | uniq' command on the domain list
    subprocess.run(f"sort {output_domains_txt} | uniq -i > sorted_{output_domains_txt}", shell=True)
    print(f"Sorted and unique domains saved to 'sorted_{output_domains_txt}'.")
    # Run the 'sort | uniq' command on the reference list
    subprocess.run(f"sort {output_refs_txt} | uniq -i > sorted_{output_refs_txt}", shell=True)
    print(f"Sorted and unique references saved to 'sorted_{output_refs_txt}'.")
except Exception as e:
    print(f"An error occurred: {str(e)}")
    sys.exit(1)